// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BaseRole {
  SUPER_ADMIN
  COMPANY
  WORKER
  CONTRACTOR
}

enum CompanyRole {
  ADMIN
  MANAGER
  WORKER
  CONTRACTOR
}

enum InvitationType {
  PLATFORM // Just join the platform (no company yet)
  COMPANY_MEMBER // Join an existing company (worker/contractor/manager/new admin of company)
  COMPANY_OWNER // Onboard a new company (as owner/admin)
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model User {
  id             Int        @id @default(autoincrement()) @map("id")
  name           String     @map("name")
  email          String     @unique @map("email")
  passwordHash   String     @map("password_hash")
  baseRole       BaseRole   @default(COMPANY) @map("base_role")
  isActive       Boolean    @default(false) @map("is_active")
  isDeleted      Boolean    @default(false) @map("is_deleted")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @updatedAt @map("updated_at")


  ownedCompanies Company[]  @relation("CompanyOwner")
  memberships    CompanyMember[]
  hiredBy        CompanyMember[] @relation("HiredBy")
  sentInvites    Invite[]        @relation("UserInvites")
  

  @@map("users")
  AuditLog AuditLog[]
  WorkerAssignment Assignment[] @relation("WorkerAssignments")
  ContractorAssignment Assignment[] @relation("ContractorAssignments")
  ContractorSite ContractorSite[] @relation("ContractorSites")
  Site Site[]
}

model Company {
  id               Int           @id @default(autoincrement()) @map("id")
  name             String        @map("name")

  // internal: only for system/admin use
  ownerId          Int           @map("owner_id")
  owner            User          @relation("CompanyOwner", fields: [ownerId], references: [id])

  // internal: used only in hierarchy mgmt
  parentCompanyId  Int?          @map("parent_company_id")
  parentCompany    Company?      @relation("SubCompanies", fields: [parentCompanyId], references: [id])
  subCompanies     Company[]     @relation("SubCompanies")

  isDeleted        Boolean       @default(false) @map("is_deleted")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at")

  siteSchema       SiteSchema[]
  site             Site[]
  members          CompanyMember[]
  invites          Invite[]      @relation("CompanyInvites")
  ContractorSchema ContractorSchema[]

  @@map("companies")
  Assignment Assignment[]
  ContractorSite ContractorSite[]
}

model CompanyMember {
  id              Int          @id @default(autoincrement()) @map("id")
  companyId       Int          @map("company_id")
  userId          Int          @map("user_id")
  roleInCompany   CompanyRole  @map("role_in_company")
  hiredBy         Int?         @map("hired_by")
  isDeleted       Boolean      @default(false) @map("is_deleted")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at")

  company         Company      @relation(fields: [companyId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  hiredByUser     User?        @relation("HiredBy", fields: [hiredBy], references: [id])
  ContractorFormAnswer ContractorFormAnswer[]
  

  @@unique([companyId, userId])
  @@map("company_members")
}


model Invite {
  id             Int            @id @default(autoincrement()) @map("id")
  code           String         @unique @map("invite_code")
  email          String         @map("email")
  invitedById    Int            @map("invited_by")
  companyId      Int?           @map("company_id")
  roleInCompany  CompanyRole?   @map("role_in_company")
  invitationType InvitationType @map("invitation_type")
  expireAt       DateTime       @map("expire_time")
  basePriceUp    Float?         @default(0.00) @map("base_price_up") // only when su admin invite a company ownern
  status         InviteStatus   @default(PENDING) @map("status")
  acceptedAt     DateTime?      @map("accepted_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at")

  invitedBy      User           @relation("UserInvites", fields: [invitedById], references: [id])
  company        Company?       @relation("CompanyInvites", fields: [companyId], references: [id])
  

  @@map("invites")
}

model SiteSchema {
  id         Int       @id @default(autoincrement()) @map("id")
  version    String    @default("1.0.0") @map("version")
  schemaName String    @map("schema_name")
  companyId  Int       @map("company_id")
  isActive   Boolean   @default(false) @map("is_active")
  schema     Json      @map("schema") // full JSON definition with fields + visibility
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  company    Company   @relation(fields: [companyId], references: [id])
  sites      Site[]
  

  @@map("site_schema")
}

model Site {
  id         Int        @id @default(autoincrement()) @map("id")
  userId     Int        @map("user_id") // tells which user added that data
  companyId  Int        @map("company_id")
  schemaId   Int        @map("schema_id")
  data       Json       @map("data") // actual filled form according to schema
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  user       User       @relation(fields: [userId], references: [id])
  company    Company    @relation(fields: [companyId], references: [id])
  schema     SiteSchema @relation(fields: [schemaId], references: [id])
  

  @@map("sites")
  Assignment Assignment[]
  ContractorSite ContractorSite[]
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  action      String    // e.g. "CONTRACTOR_ADDED", "WORKER_INDUCTED", "VISITOR_ADDED"
  entityType  String    // CONTRACTOR | WORKER | VISITOR
  entityId    Int       // id of contractor/worker/visitor
  siteId      Int?
  companyId   Int?      // id of the company
  performedBy Int       // User who did the action
  timestamp   DateTime  @default(now())
  details     Json?     // extra info: { old: {}, new: {} }

  performedByUser User  @relation(fields: [performedBy], references: [id])

  @@map("audit_logs")
}


// only edit by su admin
model ContractorSchema {
  id         Int      @id @default(autoincrement())
  version    String   @map("version")
  name       String   @map("name")  // e.g. "Worker Registration", "Public Liability Insurance"
  companyId  Int?     @map("company_id") // if company-specific, else NULL = global
  schema     Json     @map("schema") // JSON definition of form fields (questions, dropdowns)
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  company    Company? @relation(fields: [companyId], references: [id])
  ContractorFormAnswer ContractorFormAnswer[]
  

  @@map("contractor_schema")
}


model ContractorFormAnswer {
  id            Int       @id @default(autoincrement())
  contractorId  Int       @map("contractor_id")
  schemaId      Int       @map("schema_id")
  answers       Json      @map("answers") // JSON: { "public_liability": "Yes", "insurance_doc": "s3://..." }
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  contractor    CompanyMember @relation(fields: [contractorId], references: [id])
  schema        ContractorSchema @relation(fields: [schemaId], references: [id])
  
  @@map("contractor_form_answers")
  
}

// Ye table connect karegi Worker → Contractor → Company → Site.
/*
Hierarchy Example
Worker A joins → gets CompanyOfWorkerA (personal).
Contractor A joins → gets CompanyOfContractorA (personal).
Company A hires Contractor A → company_members: { userId=ContractorA, companyId=CompanyA, role=CONTRACTOR }.
Contract A hires Worker A → company_members: { userId=WorkerA, companyId=ContractorAComapnyB, role=WORKER }.
Contractor A assigns Worker A → assignments: { workerId=WorkerA, contractorId=ContractorA, companyId=CompanyA, siteId=SiteA }.
*/
/*

Worker A ka employment contract → Contractor A ki company (Company B).

Worker A ka reporting line → Contractor A (via hiredBy).

Worker A ka actual deployment → Company A ke Site A (via assignments).

Is tarah Worker A always under Contractor A, but still visible in Company A’s hierarchy (indirectly).

agar worker direct company ke under hua, to contractorId null hogi

*/
model Assignment {
  id           Int      @id @default(autoincrement())
  workerId     Int
  contractorId Int?
  companyId    Int
  siteId       Int?

  startDate    DateTime @default(now())
  endDate      DateTime?
  status       String   @default("ACTIVE")

  worker       User     @relation("WorkerAssignments", fields: [workerId], references: [id])
  contractor   User?    @relation("ContractorAssignments", fields: [contractorId], references: [id])
  company      Company  @relation(fields: [companyId], references: [id])
  site         Site?    @relation(fields: [siteId], references: [id])
}

// Company Admin/Manager add contractor to a site
model ContractorSite {
  id           Int      @id @default(autoincrement())
  contractorId Int      // for a company, user id whose role in comany is CONTRACTOR
  companyId    Int
  siteId       Int
  assignedAt   DateTime @default(now())

  contractor   User     @relation("ContractorSites", fields: [contractorId], references: [id])
  company      Company  @relation(fields: [companyId], references: [id])
  site         Site     @relation(fields: [siteId], references: [id])
}

// Email Service Models
enum EmailStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
}

model EmailRequest {
  id              String        @id @default(uuid()) @map("id")
  eventId         String        @unique @map("event_id")
  toEmail         String        @map("to_email")
  fromEmail       String?       @map("from_email")
  templateType    String        @map("template_type")
  templateData    Json          @map("template_data")
  priority        EmailPriority @default(NORMAL) @map("priority")
  status          EmailStatus   @default(QUEUED) @map("status")
  retryCount      Int           @default(0) @map("retry_count")
  maxRetries      Int           @default(3) @map("max_retries")
  errorMessage    String?       @map("error_message")
  providerResponse String?      @map("provider_response")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  scheduledAt     DateTime?     @map("scheduled_at")
  completedAt     DateTime?     @map("completed_at")

  @@map("email_requests")
}

model EmailTemplate {
  id          String   @id @default(uuid()) @map("id")
  name        String   @unique @map("name")
  subject     String   @map("subject")
  htmlContent String   @map("html_content")
  textContent String?  @map("text_content")
  variables   Json?    @map("variables") // JSON array of required template variables
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("email_templates")
}

model EmailLog {
  id          String    @id @default(uuid()) @map("id")
  requestId   String    @map("request_id")
  action      String    @map("action") // SENT, FAILED, RETRIED, etc.
  details     Json?     @map("details")
  timestamp   DateTime  @default(now()) @map("timestamp")

  @@map("email_logs")
}
